<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lvjesus's blog]]></title>
  <link href="www.blog.lvjesus.com/atom.xml" rel="self"/>
  <link href="www.blog.lvjesus.com/"/>
  <updated>2018-07-25T10:08:19+08:00</updated>
  <id>www.blog.lvjesus.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[2]]></title>
    <link href="www.blog.lvjesus.com/15324142684354.html"/>
    <updated>2018-07-24T14:37:48+08:00</updated>
    <id>www.blog.lvjesus.com/15324142684354.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1]]></title>
    <link href="www.blog.lvjesus.com/15324130404418.html"/>
    <updated>2018-07-24T14:17:20+08:00</updated>
    <id>www.blog.lvjesus.com/15324130404418.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完整开源项目]]></title>
    <link href="www.blog.lvjesus.com/14899919929184.html"/>
    <updated>2017-03-20T14:39:52+08:00</updated>
    <id>www.blog.lvjesus.com/14899919929184.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">TKeyboard</h3>

<p>应用场景</p>

<blockquote>
<p>这款应用名为：TKeyboard。有一个 Mac 端和一个 iOS 端 App。简单来说，可以通过蓝牙，使用 Mac 的键盘输入内容到 iPhone 设备中。</p>
</blockquote>

<p><a href="https://github.com/music4kid/TKeyboard">github地址</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建pod私有项目 - 组件化开发一]]></title>
    <link href="www.blog.lvjesus.com/14897591945399.html"/>
    <updated>2017-03-17T21:59:54+08:00</updated>
    <id>www.blog.lvjesus.com/14897591945399.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">基本准备工作</h3>

<blockquote>
<p>因为oschina可以免费创建私有项目,且在国内的速度要快一些,最近付费的VPN clone速度太慢,故以oschina为例.github同理.</p>
</blockquote>

<p>1.先去oschina创建一个项目存放私有Repo源,repo地址<a href="https://git.oschina.net/BBModular/BBRepo.git">https://git.oschina.net/BBModular/BBRepo.git</a> 后面私有pod源都会放在这里。</p>

<span id="more"></span><!-- more -->

<p>2.本地添加私有源 终端执行命令<code>pod repo add BBRepo https://git.oschina.net/BBModular/BBRepo.git</code>（如果之前并未向oschina push过文件也没有把SSH公钥保存到oschina，这时候应该会提示你输入oschina账号密码)</p>

<p>3.以上操作完成 <code>cd ~/.cocoapods/repos</code>目录下至少会有2个文件夹 <code>BBRepo</code> 和 <code>master</code>, master文件下面存放的是公有源文件,<code>BBRepo</code>目录下目前是空的，后面会存放我们私有源文件</p>

<hr/>

<h3 id="toc_1">Xcode创建项目</h3>

<p>1.oschina新建一个project名为BBUIBase,终端或者用图形工具sourceTree克隆到本地,开发代码.</p>

<p>2.因cocoaPods强制添加开源许可文件,终端cd至BBUIBase目录下执行命令<code>echo MIT&gt;FILE_LICENSE</code>创建名为<code>FILE_LICENSE</code>的文件</p>

<p>3.终端cd至BBUIBase目录下执行命令<code>pod spec create BBUIBase</code></p>

<p>4.终端cd至BBUIBase目录下执行命令<code>vim .BBUIBase.podspec</code>编辑podspec文件.或者用图形工具Sublime Text编辑.</p>

<p>5.退出编辑 执行命令<code>git add .</code></p>

<p>6.`git commit -m &#39;log&#39;</p>

<p>7.<code>git tag 0.0.1</code> tag一定要和podspec中的version一致</p>

<p>8.<code>git push origin master --tags</code> --tags为了把刚才添加的tag提交上去</p>

<p>9.执行命令<code>pod repo push BBRepo BBUIBase.podspec --verbose --allow-warnings</code> 注：<code>BBRepo</code>即为准备工作中的私有源仓库</p>

<p>10.成功后<code>pod search BBUIBase</code>应该就能搜索到了</p>

<pre class="line-numbers"><code class="language-ruby">-&gt; BBUIBase (0.0.1)
   A short description of BBUIBase.
   pod &#39;BBUIBase&#39;, &#39;~&gt; 0.0.1&#39;
   - Homepage: https://git.oschina.net/BBModular/BBUIBase
   - Source:   https://git.oschina.net/BBModular/BBUIBase.git
   - Versions: 0.0.1 [BBRepo repo]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语义化版本控制 2.0.0]]></title>
    <link href="www.blog.lvjesus.com/14897307692145.html"/>
    <updated>2017-03-17T14:06:09+08:00</updated>
    <id>www.blog.lvjesus.com/14897307692145.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">摘要</h3>

<p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p>

<ul>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li>次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
</ul>

<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p>

<span id="more"></span><!-- more -->

<h3 id="toc_1">简介</h3>

<p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p>

<p>在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p>

<p>作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p>

<p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p>

<h3 id="toc_2">语义化版本控制规范（SemVer）</h3>

<p>以下关键词 <code>MUST</code>、<code>MUST NOT</code>、<code>REQUIRED</code>、<code>SHALL</code>、<code>SHALL NOT</code>、<code>SHOULD</code>、<code>SHOULD NOT</code>、 <code>RECOMMENDED</code>、<code>MAY</code>、<code>OPTIONAL</code> 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）</p>

<p>使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</p>

<p>标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</p>

<p>标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。</p>

<p>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。</p>

<p>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。</p>

<p>修订号 Z（x.y.Z | x &gt; 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</p>

<p>次版本号 Y（x.Y.z | x &gt; 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。</p>

<p>主版本号 X（X.y.z | X &gt; 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。</p>

<p>先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</p>

<p>版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</p>

<p>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。</p>

<h3 id="toc_3">为什么要使用语义化的版本控制？</h3>

<p>这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。</p>

<p>举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。</p>

<p>作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。</p>

<p>如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。</p>

<h3 id="toc_4">FAQ</h3>

<p>在 0.y.z 初始开发阶段，我该如何进行版本控制？</p>

<p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p>

<p>如何判断发布 1.0.0 版本的时机？</p>

<p>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p>

<p>这不会阻碍快速开发和迭代吗？</p>

<p>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p>

<p>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</p>

<p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p>

<p>为整个公共 API 写文件太费事了！</p>

<p>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p>

<p>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</p>

<p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p>

<p>如果我更新了自己的依赖但没有改变公共 API 该怎么办？</p>

<p>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p>

<p>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</p>

<p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p>

<p>我该如何处理即将弃用的功能？</p>

<p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p>

<p>语义化版本对于版本的字串长度是否有限制呢？</p>

<p>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p>

<h3 id="toc_5">附录</h3>

<p>摘自<a href="http://semver.org/lang/zh-CN/#section-1">语义化版本 2.0.0</a><br/>
<a href="https://www.youtube.com/watch?v=x4ARXyovvPc">视频介绍波纹箭头和pod</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podfile]]></title>
    <link href="www.blog.lvjesus.com/14897191516934.html"/>
    <updated>2017-03-17T10:52:31+08:00</updated>
    <id>www.blog.lvjesus.com/14897191516934.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">什么是Podfile?</h3>

<p>Podfile是一种描述了一个或者多个Xcode项目的target依赖的规范,文件应该被命名为Podfile,所有的例子都是基于CocoaPods 1.0或更高版本</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>Podfile 可以非常的简单,这是增加了Alamofire单个目标:</p>
</blockquote>

<pre class="line-numbers"><code class="language-ruby">target &#39;MyApp&#39; do
  pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;
end
</code></pre>

<p>or</p>

<pre class="line-numbers"><code class="language-ruby">target &#39;MyApp&#39; do
  use_frameworks!
  pod &#39;Alamofire&#39;, &#39;~&gt; 3.0&#39;
end
</code></pre>

<blockquote>
<p>一个更复杂的例子:Podfile连接应用程序和它的测试包:</p>
</blockquote>

<pre class="line-numbers"><code class="language-ruby"># source  &#39;URL&#39; ： 指定镜像仓库的源
source &#39;https://github.com/CocoaPods/Specs.git&#39;
source &#39;https://github.com/Artsy/Specs.git&#39;

# 指定所支持系统和最低版本
platform :ios, &#39;9.0&#39;
# 屏蔽所有warning
inhibit_all_warnings!

target &#39;MyApp&#39; do
  pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1&#39;

  # Has its own copy of OCMock
  # and has access to GoogleAnalytics via the app
  # that hosts the test target
#主机测试目标
  target &#39;MyAppTests&#39; do
    inherit! :search_paths
    pod &#39;OCMock&#39;, &#39;~&gt; 2.0.1&#39;
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    puts target.name
  end
end

</code></pre>

<blockquote>
<p>如果你想多个target共享相同的pods 使用<code>abstract_target</code></p>
</blockquote>

<pre class="line-numbers"><code class="language-ruby"># 在任何Xcode项目中没有target叫&quot;Shows&quot;
abstract_target &#39;Shows&#39; do
  pod &#39;ShowsKit&#39;
  pod &#39;Fabric&#39;

  # 有自己的副本ShowsKit + ShowWebAuth
  target &#39;ShowsiOS&#39; do
    pod &#39;ShowWebAuth&#39;
  end

  # 有自己的副本ShowsKit + ShowTVAuth
  target &#39;ShowsTV&#39; do
    pod &#39;ShowTVAuth&#39;
  end
end

</code></pre>

<blockquote>
<p>有隐含的抽象target在Podfile的全局作用域中,所以你可以写上面的例子写成如下所示:</p>
</blockquote>

<pre class="line-numbers"><code class="language-ruby">pod &#39;ShowsKit&#39;
pod &#39;Fabric&#39;

# 有自己的副本ShowsKit + ShowWebAuth
target &#39;ShowsiOS&#39; do
  pod &#39;ShowWebAuth&#39;
end

# 有自己的副本ShowsKit + ShowTVAuth
target &#39;ShowsTV&#39; do
  pod &#39;ShowTVAuth&#39;
end

</code></pre>

<h3 id="toc_1">指定pod版本</h3>

<blockquote>
<p>不写版本号,即始终保持最新的版本</p>
</blockquote>

<pre class="line-numbers"><code class="language-ruby">pod &#39;AFNetworking&#39;

</code></pre>

<blockquote>
<p>指定版本号</p>
</blockquote>

<pre class="line-numbers"><code class="language-ruby">pod &#39;AFNetworking&#39;,&#39;3.1&#39;
</code></pre>

<blockquote>
<p>除了没有版本,或特定的一个,也可以使用逻辑运算符:</p>
</blockquote>

<ul>
<li>&#39;&gt; 0.1&#39; 版本号大于0.1</li>
<li>&#39;&gt;= 0.1&#39; 版本等于或大于0.1</li>
<li>&#39;&lt; 0.1&#39; 版本号小于0.1</li>
<li>&#39;&lt;= 0.1&#39; 版本小于或等于0.1</li>
</ul>

<blockquote>
<p>除了逻辑操作符CocoaPods还有<code>optimistic</code>操作符<code>~&gt;</code>:</p>
</blockquote>

<ul>
<li>&#39;~&gt; 0.1.2&#39; 版本号大于等于0.1.2,小于0.2</li>
<li>&#39;~&gt; 0.1&#39; 版本号大于等于0.1,小于1.0</li>
<li>&#39;~&gt; 0&#39; 版本号大于等于0,相当于不写版本号</li>
</ul>

<h3 id="toc_2">使用本地文件</h3>

<p>如果你想开发一个Pod与它的客户端项目，你可以使用<code>:path</code>。</p>

<pre class="line-numbers"><code class="language-ruby">pod &#39;Alamofire&#39;, :path =&gt; &#39;~/Documents/Alamofire&#39;
</code></pre>

<p>使用此选项CocoaPods将假设给定的文件夹是Pod的根，并将直接从Pods项目中链接文件。这意味着您的编辑将在CocoaPods安装之间保留。引用的文件夹可以是您喜欢的SCM的检出，或者甚至是当前仓库的git子模块。</p>

<p>注意，<code>podspec</code> Pod文件的预期在于指定的文件夹。</p>

<h3 id="toc_3">选择不同的分支</h3>

<ul>
<li>使用masterrepo 的分支：</li>
</ul>

<pre class="line-numbers"><code class="language-ruby">pod &#39;Alamofire&#39;, :git =&gt; &#39;https://github.com/Alamofire/Alamofire.git&#39;
</code></pre>

<ul>
<li>使用repo的不同分支：</li>
</ul>

<pre class="line-numbers"><code class="language-ruby">pod &#39;Alamofire&#39;, :git =&gt; &#39;https://github.com/Alamofire/Alamofire.git&#39;, :branch =&gt; &#39;dev&#39;
</code></pre>

<ul>
<li>使用repo的标签：</li>
</ul>

<pre class="line-numbers"><code class="language-ruby">pod &#39;Alamofire&#39;, :git =&gt; &#39;https://github.com/Alamofire/Alamofire.git&#39;, :tag =&gt; &#39;3.1.1&#39;
</code></pre>

<ul>
<li>或者指定一个提交：</li>
</ul>

<pre class="line-numbers"><code class="language-ruby">pod &#39;Alamofire&#39;, :git =&gt; &#39;https://github.com/Alamofire/Alamofire.git&#39;, :commit =&gt; &#39;0f506b1c45&#39;
</code></pre>

<h3 id="toc_4">附录</h3>

<p>摘自<a href="http://guides.cocoapods.org/using/the-podfile.html">guidescocoapods</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的设置 (显示/隐藏) 隐藏文件(快捷键`⌘⇧.`)]]></title>
    <link href="www.blog.lvjesus.com/14896520622006.html"/>
    <updated>2017-03-16T16:14:22+08:00</updated>
    <id>www.blog.lvjesus.com/14896520622006.html</id>
    <content type="html"><![CDATA[
<p><img src="media/14896520622006/1_%E6%89%93%E5%BC%80Automator.png" alt="1_打开Automato"/></p>

<span id="more"></span><!-- more -->

<p><img src="media/14896520622006/2.%E8%AE%BE%E7%BD%AEAutomator.png" alt="2.设置Automato"/></p>

<p>脚本如下:</p>

<pre class="line-numbers"><code class="language-bash">STATUS=`defaults read com.apple.finder AppleShowAllFiles`
if [ $STATUS == YES ];
then
defaults write com.apple.finder AppleShowAllFiles NO
else
defaults write com.apple.finder AppleShowAllFiles YES
fi

</code></pre>

<p>重启Finder</p>

<p>现在，如果你打开Finder——服务菜单，你会看到刚才制作的“Toggle Hidden Files”选项。现在添加键盘快捷键，打开系统偏好设置——键盘，点击”快捷键“选项卡。在左边选择”服务“，然后勾上“Toggle Hidden Files”，在它的右边双击鼠标，然后按下你想要设定成为的快捷键，如<code>⌘⇧.</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text3 (build3126) 简单使用笔记]]></title>
    <link href="www.blog.lvjesus.com/14895468321520.html"/>
    <updated>2017-03-15T11:00:32+08:00</updated>
    <id>www.blog.lvjesus.com/14895468321520.html</id>
    <content type="html"><![CDATA[
<p><a href="http://www.sublimetext.com/">官网</a></p>

<p><a href="https://packagecontrol.io/">插件官方网站</a></p>

<h3 id="toc_0">Sublime Text 特点</h3>

<p>1、Sublime Text 是一款跨平台代码编辑器，在Linux、OS X和Windows下均可使用。<br/>
2、Sublime Text 是可扩展的，并包含大量实用插件，我们可以通过安装自己领域的插件来成倍提高工作效率。<br/>
3、Sublime Text 分别是命令行环境和图形界面环境下的最佳选择，同时使用两者会大大提高工作效率。<br/>
4、Sublime Text 为收费软件，建议有能力的人付费使用，以支持开发者。不过不购买也可以一直使用。</p>

<span id="more"></span><!-- more -->

<h3 id="toc_1">设置字体及字体大小</h3>

<p>点菜单<code>Preferences---&gt;Settings</code>(快捷键: <code>⌘,</code> )<br/>
设置字体用<code>&quot;font_face&quot;</code>:<code>&quot;字体名称&quot;</code>，设置字体大小用<code>&quot;font_size&quot;</code>:<code>字体大小</code>，注意它们之间需要用逗号隔开。</p>

<h3 id="toc_2">安装插件</h3>

<p>学习Sublime Text扩展插件的安装前，让我们来先了解一下它的<a href="https://packagecontrol.io/">插件官方网站</a></p>

<p>当我们在搜索框中输入插件的关键字，相关的插件就会在下面实时显示出来，我们就可以选择自己想要的插件进行了解。</p>

<p>1.安装Package Control</p>

<blockquote>
<p>Package Control为插件管理包，所以我们首先要安装它。有了它，我们就可以很方便的浏览、安装和卸载Sublime Text中的插件。</p>
</blockquote>

<p><img src="media/14895468321520/PackageControl%E7%BD%91%E7%AB%99_1_%E6%90%9C%E7%B4%A2.png" alt="PackageControl网站_1_搜索"/></p>

<p><img src="media/14895468321520/PackageControl%E7%BD%91%E7%AB%99_2_%E5%AE%89%E8%A3%85.png" alt="PackageControl网站_2_安装"/></p>

<p>2.ConvertToUTF8 插件安装</p>

<ul>
<li><p>功能说明：ConvertToUTF8 能将除UTF8编码之外的其他编码文件在 Sublime Text 中转换成UTF8编码，在打开文件的时候一开始会显示乱码，然后一刹那就自动显示出正常的字体，当然，在保存文件之后原文件的编码格式不会改变。</p></li>
<li><p>安装方法一：快捷键 <code>⌘⇧p</code> ，打开 “Command Palette” 悬浮对话框，在顶部输入 “install”, 然后下选点击 “Package Control:Install Package”。</p></li>
</ul>

<p><img src="media/14895468321520/3_InstallPackage.png" alt="3_InstallPackage"/></p>

<p><img src="media/14895468321520/PackageControl_3_%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png" alt="PackageControl_3_插件安装"/></p>

<p>安装完成<br/>
<img src="media/14895468321520/ConvertToUTF8%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="ConvertToUTF8安装完成"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode7编译完好Xcode8报错]]></title>
    <link href="www.blog.lvjesus.com/14884217311672.html"/>
    <updated>2017-03-02T10:28:51+08:00</updated>
    <id>www.blog.lvjesus.com/14884217311672.html</id>
    <content type="html"><![CDATA[
<p>解决办法：<br/>
将 Settings 内的 <code>Enable Testability</code> 设置为 NO 即可（Xcode 7 默认关闭，Xcode 8 默认开启）；<br/>
这个相关选项和 hiar 内部的 arm64 架构的某些函数有关，导致了报错。只要设置为 no 就可以跳过这部分错误。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果macbook pro忘记密码怎么办？]]></title>
    <link href="www.blog.lvjesus.com/14884213166970.html"/>
    <updated>2017-03-02T10:21:56+08:00</updated>
    <id>www.blog.lvjesus.com/14884213166970.html</id>
    <content type="html"><![CDATA[
<p>可以通过命令行来解决，步骤如下：<br/>
1、开机， 启动时按“command+s”进入单一用户模式（Single user model）。<br/>
2、在#root&gt;下逐步输入以下命令，注意空格和大小写：<br/>
/sbin/mount -uaw 回车<br/>
rm /var/db/.applesetupdone 回车（注意“.”前没有空格）<br/>
reboot 回车<br/>
3、 重启，开机后出现类似装机时的欢迎界面。<br/>
4、重新建立一个新的Mac OS管理员账号。<br/>
5、在新的管理员下打开系统预制 － 账户，打开最下面的锁，询问密码时，用新的管理员密码登录。<br/>
6、此时会看到至少两个账号，新的管理员的帐号和原来的帐号。<br/>
7、点中原来的账号，选则密码 － 更改密码<br/>
8、点下面的登陆选项，选中【自动以右边的身份登陆】， 同时在下拉菜单中选你原先的账号。<br/>
9、 重启即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac 平台应用程序]]></title>
    <link href="www.blog.lvjesus.com/14883561894948.html"/>
    <updated>2017-03-01T16:16:29+08:00</updated>
    <id>www.blog.lvjesus.com/14883561894948.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">电子书制作</h4>

<p><a href="http://calibre-ebook.com/">calibre</a></p>

<h4 id="toc_1">移动应用原型与线框图工具</h4>

<p><a href="https://axure.cachefly.net/AxureRP-Setup.dmg">AxureRP</a></p>

<p><a href="https://modao.cc/">墨刀</a></p>

<h4 id="toc_2">macOS 不可或缺的套件管理器</h4>

<p><a href="https://brew.sh/index_zh-cn.html">Homebrew</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三方库]]></title>
    <link href="www.blog.lvjesus.com/14883343192955.html"/>
    <updated>2017-03-01T10:11:59+08:00</updated>
    <id>www.blog.lvjesus.com/14883343192955.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">钥匙串相关</a>
</li>
<li>
<a href="#toc_1">网络</a>
</li>
<li>
<a href="#toc_2">函数响应式编程</a>
</li>
<li>
<a href="#toc_3">异步编程</a>
</li>
<li>
<a href="#toc_4">CoreData</a>
</li>
<li>
<a href="#toc_5">热更新</a>
</li>
<li>
<a href="#toc_6">包管理</a>
</li>
<li>
<a href="#toc_7">AI</a>
</li>
<li>
<a href="#toc_8">数据结构</a>
</li>
<li>
<a href="#toc_9">自动布局</a>
</li>
<li>
<a href="#toc_10">音频类</a>
</li>
<li>
<a href="#toc_11">科学上网</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<hr/>

<h4 id="toc_0">钥匙串相关</h4>

<p><a href="https://github.com/lvjesus/SAMKeychain">SAMKeychain-OC</a></p>

<blockquote>
<p>SAMKeychain is a simple wrapper for accessing accounts, getting passwords, setting passwords, and deleting passwords using the system Keychain on Mac OS X and iOS.</p>
</blockquote>

<p><a href="https://github.com/castial/HYKeychainHelper">HYKeychainHelper-swift</a></p>

<blockquote>
<p>HYKeychainHelper是一个iOS系统Keychain操作的工具类，可以非常方便地实现获取账户、获取密码、添加密码和删除密码。</p>
</blockquote>

<h4 id="toc_1">网络</h4>

<p><a href="https://github.com/Alamofire/Alamofire">Alamofire-swift</a></p>

<blockquote>
<p>Alamofire is an HTTP networking library written in Swift.</p>
</blockquote>

<p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking-OC</a></p>

<blockquote>
<p>AFNetworking is a delightful networking library for iOS and Mac OS X. It&#39;s built on top of the Foundation URL Loading System, extending the powerful high-level networking abstractions built into Cocoa. It has a modular architecture with well-designed, feature-rich APIs that are a joy to use.</p>
</blockquote>

<h4 id="toc_2">函数响应式编程</h4>

<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa-OC</a></p>

<blockquote>
<p>Streams of values over time</p>
</blockquote>

<p><a href="https://github.com/ReactiveCocoa/ReactiveSwift/">ReactiveSwift-Swift</a></p>

<blockquote>
<p>Streams of values over time</p>
</blockquote>

<p><a href="https://github.com/ReactiveX/RxSwift">RxSwift-swift</a></p>

<blockquote>
<p>Reactive Programming in Swift</p>
</blockquote>

<h4 id="toc_3">异步编程</h4>

<p><a href="https://github.com/mxcl/PromiseKit">PromiseKit</a></p>

<blockquote>
<p>PromiseKit 是一款 swift 编写的支持 iOS，macOS，tvOS，watchOS 等多平台的轻量级异步编程库，同时 PromiseKit 完美的支持了 Objective-C 桥接。</p>
</blockquote>

<h4 id="toc_4">CoreData</h4>

<p><a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a></p>

<blockquote>
<p>Super Awesome Easy Fetching for Core Data</p>
</blockquote>

<p><a href="https://github.com/RestKit/RestKit">RestKit</a></p>

<blockquote>
<p>RestKit是为了和RESTful web服务交互的一个Objective-C框架。它提供了一个Core Data实体映射引擎，把序列化的响应对象直接映射给托管的对象。</p>
</blockquote>

<p><a href="https://github.com/mutualmobile/MMRecord">MMRecord</a></p>

<blockquote>
<p>MMRecord是一个基于block（块）的集成库，它使用Core Data模型配置，自动创建并填充来自API响应的完整地对象图。当它在后台为你创建、获取、填充NSManagedObjects 实例时，使从web服务请求来的生成的本地对象尽可能简单。</p>
</blockquote>

<p><a href="https://github.com/GrahamDennis/GDCoreDataConcurrencyDebugging">GDCoreDataConcurrencyDebugging</a></p>

<blockquote>
<p>GDCoreDataConcurrencyDebugging helps you find cases where NSManagedObject&#39;s are being called on the wrong thread or dispatch queue.</p>
</blockquote>

<p><a href="https://github.com/tLewisII/CoreData-hs">CoreData-hs</a></p>

<blockquote>
<p>Core Data fetch requests, created for you.<br/>
CoreData-hs 生成类别方法来执行Core Data模型里所有实体和属性的常见获取请求。创建这些方法不难，但它耗时--编码时节省每一点时间都是有价值的！</p>
</blockquote>

<h4 id="toc_5">热更新</h4>

<p><a href="https://github.com/bang590/JSPatch">JSPatch</a></p>

<blockquote>
<p>JSPatch bridge Objective-C and Javascript using the Objective-C runtime. You can call any Objective-C class and method in JavaScript by just including a small engine. JSPatch is generally used to hotfix iOS App.<br/>
JSPatch 可以让你用 JavaScript 书写原生 iOS APP。只需在项目引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。<br/>
<a href="http://jspatch.com/">JSPatch平台集成方案</a></p>
</blockquote>

<p><a href="https://github.com/facebook/react-native">react-native</a></p>

<blockquote>
<p>A framework for building native apps with React <a href="http://facebook.github.io/react-native/">Docs</a></p>
</blockquote>

<p><a href="https://github.com/alibaba/weex">weex</a></p>

<blockquote>
<p>A framework for building Mobile cross-platform UI</p>
</blockquote>

<p><a href="https://github.com/DynamicCocoa/DynamicCocoa">DynamicCocoa</a></p>

<blockquote>
<p>A framework for running Cocoa code dynamically.</p>
</blockquote>

<h4 id="toc_6">包管理</h4>

<p><a href="https://github.com/Homebrew/brew/">Homebrew</a></p>

<blockquote>
<p>The missing package manager for macOS</p>
</blockquote>

<h4 id="toc_7">AI</h4>

<ul>
<li><a href="https://github.com/collinhundley/Swift-AI">Swift-AI</a></li>
</ul>

<blockquote>
<p>The machine learning library in Swift.</p>
</blockquote>

<ul>
<li><a href="https://github.com/tensorflow/tensorflow">tensorflow</a></li>
</ul>

<blockquote>
<p>Computation using data flow graphs for scalable machine learning <a href="http://tensorflow.org">http://tensorflow.org</a></p>
</blockquote>

<ul>
<li><a href="https://github.com/jikexueyuanwiki/tensorflow-zh">tensorflow-zh</a></li>
</ul>

<blockquote>
<p>谷歌全新开源人工智能系统TensorFlow官方文档中文版 <a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/">http://wiki.jikexueyuan.com/project/tensorflow-zh/</a></p>
</blockquote>

<p><a href="https://github.com/ZuzooVn/machine-learning-for-software-engineers">machine-learning-for-software-engineers</a></p>

<blockquote>
<p>A complete daily plan for studying to become a machine learning engineer.</p>
</blockquote>

<p><a href="https://github.com/josephmisiti/awesome-machine-learning">awesome-machine-learning</a></p>

<blockquote>
<p>A curated list of awesome Machine Learning frameworks, libraries and software.</p>
</blockquote>

<p><a href="https://github.com/scikit-learn/scikit-learn">scikit-learn</a></p>

<blockquote>
<p>scikit-learn: machine learning in Python <a href="http://scikit-learn.org">http://scikit-learn.org</a></p>
</blockquote>

<p><a href="https://github.com/aymericdamien/TensorFlow-Examples">TensorFlow-Examples</a></p>

<blockquote>
<p>TensorFlow Tutorial and Examples for beginners <a href="https://tensorflow.org">https://tensorflow.org</a></p>
</blockquote>

<h4 id="toc_8">数据结构</h4>

<p><a href="https://github.com/VinDeng/dataStructures">dataStructures</a></p>

<blockquote>
<p>常用数据结构封装</p>
</blockquote>

<h4 id="toc_9">自动布局</h4>

<p><a href="https://github.com/SnapKit/SnapKit">SnapKit</a></p>

<blockquote>
<p>A Swift Autolayout DSL for iOS &amp; OS X</p>
</blockquote>

<h4 id="toc_10">音频类</h4>

<p><a href="https://github.com/TheAmazingAudioEngine/TheAmazingAudioEngine">TheAmazingAudioEngine</a></p>

<p><a href="https://github.com/TheAmazingAudioEngine/TheAmazingAudioEngine2">TheAmazingAudioEngine2</a></p>

<h4 id="toc_11">科学上网</h4>

<p><a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7">new-pac</a></p>

<blockquote>
<p>自由上网方法</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift 中 open,public,internal,fileprivate,private关键词]]></title>
    <link href="www.blog.lvjesus.com/14878610150115.html"/>
    <updated>2017-02-23T22:43:35+08:00</updated>
    <id>www.blog.lvjesus.com/14878610150115.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">open</h4>

<ul>
<li>open 修饰的 class 在 Module 内部和外部都可以被访问和继承</li>
<li>open 修饰的 func 在 Module 内部和外部都可以被访问和重载（override）</li>
</ul>

<h4 id="toc_1">public</h4>

<ul>
<li>public 修饰的 class 在 Module 内部可以访问和继承，在外部只能访问</li>
<li>public 修饰的 func 在 Module 内部可以被访问和重载（override）,在外部只能访问</li>
</ul>

<h4 id="toc_2">Final</h4>

<ul>
<li>final 修饰的 class 任何地方都不能被继承</li>
<li>final 修饰的 func 任何地方都不能被 Override</li>
</ul>

<h4 id="toc_3">internal</h4>

<ul>
<li>默认访问级别，internal修饰符可写可不写</li>
<li>internal 修饰的属性或方法在源代码所在的整个模块都可以访问</li>
</ul>

<h4 id="toc_4">fileprivate</h4>

<ul>
<li>fileprivate 修饰的属性或者方法在当前的Swift源文件里可以访问。</li>
</ul>

<h4 id="toc_5">private</h4>

<ul>
<li>private 修饰的属性或者方法只能在当前类里访问。</li>
</ul>

<hr/>

<h4 id="toc_6">访问权限从高到低排序如下：</h4>

<p>open &gt; public &gt; internal &gt; fileprivate &gt; private。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demo]]></title>
    <link href="www.blog.lvjesus.com/14878609983402.html"/>
    <updated>2017-02-23T22:43:18+08:00</updated>
    <id>www.blog.lvjesus.com/14878609983402.html</id>
    <content type="html"><![CDATA[
<p>写博客的工具也由<a href="https://hexo.io/">Hexo</a>转为<a href="http://zh.mweb.im/">MWeb</a></p>

<p>博客地址现在统一改为 </p>

<blockquote>
<p><a href="http://blog.lvjesus.com">blog.lvjesus.com</a></p>
</blockquote>

<p>github现在统一改为</p>

<blockquote>
<p><a href="https://github.com/lvjesus/">https://github.com/lvjesus/</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[摄像头]]></title>
    <link href="www.blog.lvjesus.com/14878418851648.html"/>
    <updated>2017-02-23T17:24:45+08:00</updated>
    <id>www.blog.lvjesus.com/14878418851648.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">2.为了捕捉视频,我们需要这样几种类（与其它的子类）。</h4>

<ul>
<li>AVCaptureDevice 代表了输入设备,例如摄像头与麦克风。</li>
<li>AVCaptureInput 代表了输入数据源</li>
<li>AVCaptureOutput 代表了输出数据源</li>
<li>AVCaptureSession 用于协调输入与输出之间的数据流</li>
<li>AVCaptureVideoPreviewLayer 提供摄像头的预览功能</li>
</ul>

]]></content>
  </entry>
  
</feed>
