<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lvjesus's blog]]></title>
  <link href="www.blog.lvjesus.com/atom.xml" rel="self"/>
  <link href="www.blog.lvjesus.com/"/>
  <updated>2017-03-15T14:16:23+08:00</updated>
  <id>www.blog.lvjesus.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text3 (build3126) 简单使用笔记]]></title>
    <link href="www.blog.lvjesus.com/14895468321520.html"/>
    <updated>2017-03-15T11:00:32+08:00</updated>
    <id>www.blog.lvjesus.com/14895468321520.html</id>
    <content type="html"><![CDATA[
<p><a href="http://www.sublimetext.com/">官网</a></p>

<p><a href="https://packagecontrol.io/">插件官方网站</a></p>

<h3 id="toc_0">Sublime Text 特点</h3>

<p>1、Sublime Text 是一款跨平台代码编辑器，在Linux、OS X和Windows下均可使用。<br/>
2、Sublime Text 是可扩展的，并包含大量实用插件，我们可以通过安装自己领域的插件来成倍提高工作效率。<br/>
3、Sublime Text 分别是命令行环境和图形界面环境下的最佳选择，同时使用两者会大大提高工作效率。<br/>
4、Sublime Text 为收费软件，建议有能力的人付费使用，以支持开发者。不过不购买也可以一直使用。</p>

<span id="more"></span><!-- more -->

<h3 id="toc_1">设置字体及字体大小</h3>

<p>点菜单<code>Preferences---&gt;Settings</code>(快捷键: <code>⌘,</code> )<br/>
设置字体用<code>&quot;font_face&quot;</code>:<code>&quot;字体名称&quot;</code>，设置字体大小用<code>&quot;font_size&quot;</code>:<code>字体大小</code>，注意它们之间需要用逗号隔开。</p>

<h3 id="toc_2">安装插件</h3>

<p>学习Sublime Text扩展插件的安装前，让我们来先了解一下它的<a href="https://packagecontrol.io/">插件官方网站</a></p>

<p>当我们在搜索框中输入插件的关键字，相关的插件就会在下面实时显示出来，我们就可以选择自己想要的插件进行了解。</p>

<p>1.安装Package Control</p>

<blockquote>
<p>Package Control为插件管理包，所以我们首先要安装它。有了它，我们就可以很方便的浏览、安装和卸载Sublime Text中的插件。</p>
</blockquote>

<p><img src="media/14895468321520/PackageControl%E7%BD%91%E7%AB%99_1_%E6%90%9C%E7%B4%A2.png" alt="PackageControl网站_1_搜索"/></p>

<p><img src="media/14895468321520/PackageControl%E7%BD%91%E7%AB%99_2_%E5%AE%89%E8%A3%85.png" alt="PackageControl网站_2_安装"/></p>

<p>2.ConvertToUTF8 插件安装</p>

<ul>
<li><p>功能说明：ConvertToUTF8 能将除UTF8编码之外的其他编码文件在 Sublime Text 中转换成UTF8编码，在打开文件的时候一开始会显示乱码，然后一刹那就自动显示出正常的字体，当然，在保存文件之后原文件的编码格式不会改变。</p></li>
<li><p>安装方法一：快捷键 <code>⌘⇧p</code> ，打开 “Command Palette” 悬浮对话框，在顶部输入 “install”, 然后下选点击 “Package Control:Install Package”。</p></li>
</ul>

<p><img src="media/14895468321520/3_InstallPackage.png" alt="3_InstallPackage"/></p>

<p><img src="media/14895468321520/PackageControl_3_%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png" alt="PackageControl_3_插件安装"/></p>

<p>安装完成<br/>
<img src="media/14895468321520/ConvertToUTF8%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="ConvertToUTF8安装完成"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demonstrate]]></title>
    <link href="www.blog.lvjesus.com/14887665167043.html"/>
    <updated>2017-03-06T10:15:16+08:00</updated>
    <id>www.blog.lvjesus.com/14887665167043.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode7编译完好Xcode8报错]]></title>
    <link href="www.blog.lvjesus.com/14884217311672.html"/>
    <updated>2017-03-02T10:28:51+08:00</updated>
    <id>www.blog.lvjesus.com/14884217311672.html</id>
    <content type="html"><![CDATA[
<p>解决办法：<br/>
将 Settings 内的 <code>Enable Testability</code> 设置为 NO 即可（Xcode 7 默认关闭，Xcode 8 默认开启）；<br/>
这个相关选项和 hiar 内部的 arm64 架构的某些函数有关，导致了报错。只要设置为 no 就可以跳过这部分错误。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果macbook pro忘记密码怎么办？]]></title>
    <link href="www.blog.lvjesus.com/14884213166970.html"/>
    <updated>2017-03-02T10:21:56+08:00</updated>
    <id>www.blog.lvjesus.com/14884213166970.html</id>
    <content type="html"><![CDATA[
<p>可以通过命令行来解决，步骤如下：<br/>
1、开机， 启动时按“command+s”进入单一用户模式（Single user model）。<br/>
2、在#root&gt;下逐步输入以下命令，注意空格和大小写：<br/>
/sbin/mount -uaw 回车<br/>
rm /var/db/.applesetupdone 回车（注意“.”前没有空格）<br/>
reboot 回车<br/>
3、 重启，开机后出现类似装机时的欢迎界面。<br/>
4、重新建立一个新的Mac OS管理员账号。<br/>
5、在新的管理员下打开系统预制 － 账户，打开最下面的锁，询问密码时，用新的管理员密码登录。<br/>
6、此时会看到至少两个账号，新的管理员的帐号和原来的帐号。<br/>
7、点中原来的账号，选则密码 － 更改密码<br/>
8、点下面的登陆选项，选中【自动以右边的身份登陆】， 同时在下拉菜单中选你原先的账号。<br/>
9、 重启即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac 平台应用程序]]></title>
    <link href="www.blog.lvjesus.com/14883561894948.html"/>
    <updated>2017-03-01T16:16:29+08:00</updated>
    <id>www.blog.lvjesus.com/14883561894948.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">电子书制作</h4>

<p><a href="http://calibre-ebook.com/">calibre</a></p>

<h4 id="toc_1">移动应用原型与线框图工具</h4>

<p><a href="https://modao.cc/">墨刀</a></p>

<h4 id="toc_2">macOS 不可或缺的套件管理器</h4>

<p><a href="https://brew.sh/index_zh-cn.html">Homebrew</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三方库]]></title>
    <link href="www.blog.lvjesus.com/14883343192955.html"/>
    <updated>2017-03-01T10:11:59+08:00</updated>
    <id>www.blog.lvjesus.com/14883343192955.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">钥匙串相关</a>
</li>
<li>
<a href="#toc_1">网络</a>
</li>
<li>
<a href="#toc_2">函数响应式编程</a>
</li>
<li>
<a href="#toc_3">异步编程</a>
</li>
<li>
<a href="#toc_4">CoreData</a>
</li>
<li>
<a href="#toc_5">热更新</a>
</li>
<li>
<a href="#toc_6">包管理</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<hr/>

<h4 id="toc_0">钥匙串相关</h4>

<p><a href="https://github.com/lvjesus/SAMKeychain">SAMKeychain-OC</a></p>

<blockquote>
<p>SAMKeychain is a simple wrapper for accessing accounts, getting passwords, setting passwords, and deleting passwords using the system Keychain on Mac OS X and iOS.</p>
</blockquote>

<p><a href="https://github.com/castial/HYKeychainHelper">HYKeychainHelper-swift</a></p>

<blockquote>
<p>HYKeychainHelper是一个iOS系统Keychain操作的工具类，可以非常方便地实现获取账户、获取密码、添加密码和删除密码。</p>
</blockquote>

<h4 id="toc_1">网络</h4>

<p><a href="https://github.com/Alamofire/Alamofire">Alamofire-swift</a></p>

<blockquote>
<p>Alamofire is an HTTP networking library written in Swift.</p>
</blockquote>

<p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking-OC</a></p>

<blockquote>
<p>AFNetworking is a delightful networking library for iOS and Mac OS X. It&#39;s built on top of the Foundation URL Loading System, extending the powerful high-level networking abstractions built into Cocoa. It has a modular architecture with well-designed, feature-rich APIs that are a joy to use.</p>
</blockquote>

<h4 id="toc_2">函数响应式编程</h4>

<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa-OC</a></p>

<blockquote>
<p>Streams of values over time</p>
</blockquote>

<p><a href="https://github.com/ReactiveCocoa/ReactiveSwift/">ReactiveSwift-Swift</a></p>

<blockquote>
<p>Streams of values over time</p>
</blockquote>

<p><a href="https://github.com/ReactiveX/RxSwift">RxSwift-swift</a></p>

<blockquote>
<p>Reactive Programming in Swift</p>
</blockquote>

<h4 id="toc_3">异步编程</h4>

<p><a href="https://github.com/mxcl/PromiseKit">PromiseKit</a></p>

<blockquote>
<p>PromiseKit 是一款 swift 编写的支持 iOS，macOS，tvOS，watchOS 等多平台的轻量级异步编程库，同时 PromiseKit 完美的支持了 Objective-C 桥接。</p>
</blockquote>

<h4 id="toc_4">CoreData</h4>

<p><a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a></p>

<blockquote>
<p>Super Awesome Easy Fetching for Core Data</p>
</blockquote>

<p><a href="https://github.com/RestKit/RestKit">RestKit</a></p>

<blockquote>
<p>RestKit是为了和RESTful web服务交互的一个Objective-C框架。它提供了一个Core Data实体映射引擎，把序列化的响应对象直接映射给托管的对象。</p>
</blockquote>

<p><a href="https://github.com/mutualmobile/MMRecord">MMRecord</a></p>

<blockquote>
<p>MMRecord是一个基于block（块）的集成库，它使用Core Data模型配置，自动创建并填充来自API响应的完整地对象图。当它在后台为你创建、获取、填充NSManagedObjects 实例时，使从web服务请求来的生成的本地对象尽可能简单。</p>
</blockquote>

<p><a href="https://github.com/GrahamDennis/GDCoreDataConcurrencyDebugging">GDCoreDataConcurrencyDebugging</a></p>

<blockquote>
<p>GDCoreDataConcurrencyDebugging helps you find cases where NSManagedObject&#39;s are being called on the wrong thread or dispatch queue.</p>
</blockquote>

<p><a href="https://github.com/tLewisII/CoreData-hs">CoreData-hs</a></p>

<blockquote>
<p>Core Data fetch requests, created for you.<br/>
CoreData-hs 生成类别方法来执行Core Data模型里所有实体和属性的常见获取请求。创建这些方法不难，但它耗时--编码时节省每一点时间都是有价值的！</p>
</blockquote>

<h4 id="toc_5">热更新</h4>

<p><a href="https://github.com/bang590/JSPatch">JSPatch</a></p>

<blockquote>
<p>JSPatch bridge Objective-C and Javascript using the Objective-C runtime. You can call any Objective-C class and method in JavaScript by just including a small engine. JSPatch is generally used to hotfix iOS App.<br/>
JSPatch 可以让你用 JavaScript 书写原生 iOS APP。只需在项目引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。<br/>
<a href="http://jspatch.com/">JSPatch平台集成方案</a></p>
</blockquote>

<p><a href="https://github.com/facebook/react-native">react-native</a></p>

<blockquote>
<p>A framework for building native apps with React <a href="http://facebook.github.io/react-native/">Docs</a></p>
</blockquote>

<p><a href="https://github.com/alibaba/weex">weex</a></p>

<blockquote>
<p>A framework for building Mobile cross-platform UI</p>
</blockquote>

<p><a href="https://github.com/DynamicCocoa/DynamicCocoa">DynamicCocoa</a></p>

<blockquote>
<p>A framework for running Cocoa code dynamically.</p>
</blockquote>

<h4 id="toc_6">包管理</h4>

<p><a href="https://github.com/Homebrew/brew/">Homebrew</a></p>

<blockquote>
<p>The missing package manager for macOS</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift 中 open,public,internal,fileprivate,private关键词]]></title>
    <link href="www.blog.lvjesus.com/14878610150115.html"/>
    <updated>2017-02-23T22:43:35+08:00</updated>
    <id>www.blog.lvjesus.com/14878610150115.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">open</h4>

<ul>
<li>open 修饰的 class 在 Module 内部和外部都可以被访问和继承</li>
<li>open 修饰的 func 在 Module 内部和外部都可以被访问和重载（override）</li>
</ul>

<h4 id="toc_1">public</h4>

<ul>
<li>public 修饰的 class 在 Module 内部可以访问和继承，在外部只能访问</li>
<li>public 修饰的 func 在 Module 内部可以被访问和重载（override）,在外部只能访问</li>
</ul>

<h4 id="toc_2">Final</h4>

<ul>
<li>final 修饰的 class 任何地方都不能被继承</li>
<li>final 修饰的 func 任何地方都不能被 Override</li>
</ul>

<h4 id="toc_3">internal</h4>

<ul>
<li>默认访问级别，internal修饰符可写可不写</li>
<li>internal 修饰的属性或方法在源代码所在的整个模块都可以访问</li>
</ul>

<h4 id="toc_4">fileprivate</h4>

<ul>
<li>fileprivate 修饰的属性或者方法在当前的Swift源文件里可以访问。</li>
</ul>

<h4 id="toc_5">private</h4>

<ul>
<li>private 修饰的属性或者方法只能在当前类里访问。</li>
</ul>

<hr/>

<h4 id="toc_6">访问权限从高到低排序如下：</h4>

<p>open &gt; public &gt; internal &gt; fileprivate &gt; private。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demo]]></title>
    <link href="www.blog.lvjesus.com/14878609983402.html"/>
    <updated>2017-02-23T22:43:18+08:00</updated>
    <id>www.blog.lvjesus.com/14878609983402.html</id>
    <content type="html"><![CDATA[
<p>写博客的工具也由<a href="https://hexo.io/">Hexo</a>转为<a href="http://zh.mweb.im/">MWeb</a></p>

<p>博客地址现在统一改为 </p>

<blockquote>
<p><a href="http://blog.lvjesus.com">blog.lvjesus.com</a></p>
</blockquote>

<p>github现在统一改为</p>

<blockquote>
<p><a href="https://github.com/lvjesus/">https://github.com/lvjesus/</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[摄像头]]></title>
    <link href="www.blog.lvjesus.com/14878418851648.html"/>
    <updated>2017-02-23T17:24:45+08:00</updated>
    <id>www.blog.lvjesus.com/14878418851648.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">2.为了捕捉视频,我们需要这样几种类（与其它的子类）。</h4>

<ul>
<li>AVCaptureDevice 代表了输入设备,例如摄像头与麦克风。</li>
<li>AVCaptureInput 代表了输入数据源</li>
<li>AVCaptureOutput 代表了输出数据源</li>
<li>AVCaptureSession 用于协调输入与输出之间的数据流</li>
<li>AVCaptureVideoPreviewLayer 提供摄像头的预览功能</li>
</ul>

]]></content>
  </entry>
  
</feed>
